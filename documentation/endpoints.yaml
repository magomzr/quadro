openapi: 3.0.3
info:
  title: Quadro API
  description: |
    API REST para Quadro - Plataforma multi-tenant de administración de catálogos, ventas e inventarios.

    ## Arquitectura Multi-tenant
    - Todas las rutas administrativas incluyen `tenantId` para aislamiento de datos
    - API pública usa `tenantSlug` para acceso del frontend de tienda
    - Autenticación JWT con roles (admin/staff)

    ## Versionado
    - API versionada desde v1 (`/api/v1/`)
    - Compatibilidad hacia atrás garantizada dentro de la misma versión mayor
  version: '1.0.0'
  contact:
    name: Quadro API Support
    email: support@quadro.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Desarrollo local
  - url: https://api.quadro.com/v1
    description: Producción

security:
  - BearerAuth: []

paths:
  # ==========================================
  # TENANT MANAGEMENT
  # ==========================================
  /tenants:
    post:
      tags:
        - Tenants
      summary: Crear nuevo tenant (onboarding)
      description: Registra una nueva empresa/tienda en la plataforma
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                  example: 'Mi Tienda Online'
                slug:
                  type: string
                  pattern: '^[a-z0-9-]+$'
                  example: 'mi-tienda-online'
                  description: 'Identificador único para URLs públicas'
      responses:
        '201':
          description: Tenant creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '409':
          description: Slug ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tenants/{slug}:
    get:
      tags:
        - Tenants
      summary: Obtener tenant por slug público
      description: Información básica del tenant para validación
      security: []
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          example: 'mi-tienda-online'
      responses:
        '200':
          description: Tenant encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '404':
          description: Tenant no encontrado

  /tenants/{tenantId}:
    patch:
      tags:
        - Tenants
      summary: Actualizar tenant
      description: Solo usuarios admin pueden actualizar información del tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Nuevo Nombre de Tienda'
                isActive:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Tenant actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '403':
          description: Solo admins pueden actualizar tenants

    delete:
      tags:
        - Tenants
      summary: Desactivar tenant (soft delete)
      description: Desactiva el tenant sin eliminar datos
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Tenant desactivado
        '403':
          description: Solo admins pueden desactivar tenants

  # ==========================================
  # AUTHENTICATION & USERS
  # ==========================================
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Iniciar sesión
      description: Autenticación de usuario con email y contraseña
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - tenantId
              properties:
                email:
                  type: string
                  format: email
                  example: 'admin@mitienda.com'
                password:
                  type: string
                  format: password
                  example: 'password123'
                tenantId:
                  type: string
                  format: uuid
                  example: '123e4567-e89b-12d3-a456-426614174000'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                  refreshToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '401':
          description: Credenciales inválidas

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Cerrar sesión
      description: Invalida el token actual
      responses:
        '200':
          description: Sesión cerrada exitosamente

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Renovar token de acceso
      description: Obtiene un nuevo token usando el refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token renovado
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Solicitar reset de contraseña
      description: Envía email con token para reset de contraseña
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - tenantId
              properties:
                email:
                  type: string
                  format: email
                tenantId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Email de reset enviado

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Confirmar reset de contraseña
      description: Establece nueva contraseña usando token de reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Contraseña actualizada

  /tenants/{tenantId}/users:
    get:
      tags:
        - Users
      summary: Listar usuarios del tenant
      description: Obtiene todos los usuarios del tenant con paginación
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, staff]
          description: Filtrar por rol
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

    post:
      tags:
        - Users
      summary: Crear usuario (solo admin)
      description: Crea un nuevo usuario en el tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Solo admins pueden crear usuarios

  /tenants/{tenantId}/users/{userId}:
    get:
      tags:
        - Users
      summary: Obtener usuario específico
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    patch:
      tags:
        - Users
      summary: Actualizar usuario
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      tags:
        - Users
      summary: Desactivar usuario
      description: Desactiva el usuario sin eliminar datos
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Usuario desactivado

  # ==========================================
  # CATALOG MANAGEMENT - CATEGORIES
  # ==========================================
  /tenants/{tenantId}/catalog/categories:
    get:
      tags:
        - Categories
      summary: Listar categorías
      description: Obtiene todas las categorías del tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Lista de categorías
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'

    post:
      tags:
        - Categories
      summary: Crear categoría
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Categoría creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /tenants/{tenantId}/catalog/categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Obtener categoría específica
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: Categoría encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

    patch:
      tags:
        - Categories
      summary: Actualizar categoría
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Categoría actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

    delete:
      tags:
        - Categories
      summary: Eliminar categoría
      description: Elimina la categoría y desvincula productos
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: Categoría eliminada

  # ==========================================
  # CATALOG MANAGEMENT - PRODUCTS
  # ==========================================
  /tenants/{tenantId}/catalog/products:
    get:
      tags:
        - Products
      summary: Listar productos
      description: Obtiene productos con filtros avanzados
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
          description: Filtrar por categoría
        - name: isPublished
          in: query
          schema:
            type: boolean
          description: Filtrar por estado de publicación
        - name: lowStock
          in: query
          schema:
            type: boolean
          description: Solo productos con stock bajo
        - name: search
          in: query
          schema:
            type: string
          description: Buscar en nombre y descripción
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'

    post:
      tags:
        - Products
      summary: Crear producto
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

  /tenants/{tenantId}/catalog/products/{productId}:
    get:
      tags:
        - Products
      summary: Obtener producto específico
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

    patch:
      tags:
        - Products
      summary: Actualizar producto
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

    delete:
      tags:
        - Products
      summary: Eliminar producto
      description: Elimina el producto si no tiene órdenes asociadas
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      responses:
        '200':
          description: Producto eliminado
        '409':
          description: No se puede eliminar, tiene órdenes asociadas

  /tenants/{tenantId}/catalog/products/{productId}/stock:
    patch:
      tags:
        - Products
      summary: Actualizar stock del producto
      description: Actualiza únicamente el stock del producto
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stock
              properties:
                stock:
                  type: integer
                  minimum: 0
                  example: 100
      responses:
        '200':
          description: Stock actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

  /tenants/{tenantId}/catalog/products/{productId}/publish:
    patch:
      tags:
        - Products
      summary: Publicar/despublicar producto
      description: Cambia el estado de publicación del producto
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isPublished
              properties:
                isPublished:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Estado de publicación actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

  # ==========================================
  # CUSTOMERS
  # ==========================================
  /tenants/{tenantId}/customers:
    get:
      tags:
        - Customers
      summary: Listar clientes
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: search
          in: query
          schema:
            type: string
          description: Buscar por nombre o email
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'

    post:
      tags:
        - Customers
      summary: Crear cliente
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Cliente creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'

  /tenants/{tenantId}/customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Obtener cliente específico
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'

    patch:
      tags:
        - Customers
      summary: Actualizar cliente
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CustomerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Cliente actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'

    delete:
      tags:
        - Customers
      summary: Eliminar cliente
      description: Elimina el cliente si no tiene órdenes asociadas
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/CustomerId'
      responses:
        '200':
          description: Cliente eliminado
        '409':
          description: No se puede eliminar, tiene órdenes asociadas

  # ==========================================
  # ORDERS & SALES
  # ==========================================
  /tenants/{tenantId}/orders:
    get:
      tags:
        - Orders
      summary: Listar pedidos
      description: Obtiene pedidos con filtros por estado y fecha
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, paid, cancelled]
          description: Filtrar por estado
        - name: customerId
          in: query
          schema:
            type: string
            format: uuid
          description: Filtrar por cliente
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
          description: Fecha desde (YYYY-MM-DD)
        - name: toDate
          in: query
          schema:
            type: string
            format: date
          description: Fecha hasta (YYYY-MM-DD)
      responses:
        '200':
          description: Lista de pedidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'

    post:
      tags:
        - Orders
      summary: Crear pedido
      description: Crea un nuevo pedido con sus items
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Pedido creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Error en validación (stock insuficiente, etc.)

  /tenants/{tenantId}/orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Obtener pedido específico
      description: Incluye items del pedido y información del cliente
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Pedido encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailResponse'

    patch:
      tags:
        - Orders
      summary: Actualizar pedido
      description: Actualiza información general del pedido
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Pedido actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'

    delete:
      tags:
        - Orders
      summary: Cancelar pedido
      description: Cambia el estado a cancelled y restaura stock
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: Pedido cancelado

  /tenants/{tenantId}/orders/{orderId}/status:
    patch:
      tags:
        - Orders
      summary: Cambiar estado del pedido
      description: Actualiza únicamente el estado del pedido
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, paid, cancelled]
                  example: 'paid'
      responses:
        '200':
          description: Estado actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'

  # ==========================================
  # DISCOUNTS & PROMOTIONS
  # ==========================================
  /tenants/{tenantId}/discounts:
    get:
      tags:
        - Discounts
      summary: Listar descuentos
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: active
          in: query
          schema:
            type: boolean
          description: Filtrar por estado activo
      responses:
        '200':
          description: Lista de descuentos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountListResponse'

    post:
      tags:
        - Discounts
      summary: Crear descuento
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDiscountRequest'
      responses:
        '201':
          description: Descuento creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'

  /tenants/{tenantId}/discounts/{discountId}:
    get:
      tags:
        - Discounts
      summary: Obtener descuento específico
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/DiscountId'
      responses:
        '200':
          description: Descuento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'

    patch:
      tags:
        - Discounts
      summary: Actualizar descuento
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/DiscountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDiscountRequest'
      responses:
        '200':
          description: Descuento actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountResponse'

    delete:
      tags:
        - Discounts
      summary: Eliminar descuento
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/DiscountId'
      responses:
        '200':
          description: Descuento eliminado

  /tenants/{tenantId}/discounts/validate:
    post:
      tags:
        - Discounts
      summary: Validar código de descuento
      description: Valida si un código de descuento es aplicable a un pedido
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - orderAmount
              properties:
                code:
                  type: string
                  example: '10OFF'
                orderAmount:
                  type: number
                  format: decimal
                  example: 100.00
      responses:
        '200':
          description: Código válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  discount:
                    $ref: '#/components/schemas/DiscountResponse'
                  discountAmount:
                    type: number
                    format: decimal
                    example: 10.00
        '400':
          description: Código inválido o expirado

  # ==========================================
  # SETTINGS & CONFIGURATION
  # ==========================================
  /tenants/{tenantId}/settings:
    get:
      tags:
        - Settings
      summary: Obtener configuración del tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Configuración del tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'

    patch:
      tags:
        - Settings
      summary: Actualizar configuración
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: Configuración actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'

  # ==========================================
  # ANALYTICS & REPORTS
  # ==========================================
  /tenants/{tenantId}/analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Métricas del dashboard principal
      description: KPIs principales para el dashboard
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: period
          in: query
          schema:
            type: string
            enum: [today, week, month, quarter, year]
            default: month
          description: Período para las métricas
      responses:
        '200':
          description: Métricas del dashboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardMetricsResponse'

  /tenants/{tenantId}/analytics/sales:
    get:
      tags:
        - Analytics
      summary: Reportes de ventas
      description: Reportes detallados de ventas con gráficos
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: groupBy
          in: query
          schema:
            type: string
            enum: [day, week, month]
            default: day
      responses:
        '200':
          description: Reporte de ventas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesReportResponse'

  # ==========================================
  # AUDIT LOGS
  # ==========================================
  /tenants/{tenantId}/logs:
    get:
      tags:
        - Audit Logs
      summary: Listar logs de auditoría (solo admin)
      description: Historial de acciones realizadas en el tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filtrar por usuario
        - name: resource
          in: query
          schema:
            type: string
          description: Filtrar por tipo de recurso
        - name: action
          in: query
          schema:
            type: string
          description: Filtrar por acción
      responses:
        '200':
          description: Lista de logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogListResponse'
        '403':
          description: Solo admins pueden ver logs

  # ==========================================
  # PUBLIC API (Para Frontend de Tienda)
  # ==========================================
  /public/{tenantSlug}/catalog:
    get:
      tags:
        - Public API
      summary: Catálogo público completo
      description: Categorías y productos publicados para la tienda
      security: []
      parameters:
        - name: tenantSlug
          in: path
          required: true
          schema:
            type: string
          example: 'mi-tienda-online'
      responses:
        '200':
          description: Catálogo público
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicCatalogResponse'

  /public/{tenantSlug}/products:
    get:
      tags:
        - Public API
      summary: Productos publicados
      description: Lista de productos disponibles para compra
      security: []
      parameters:
        - name: tenantSlug
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Lista de productos públicos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProductListResponse'

  /public/{tenantSlug}/products/{productId}:
    get:
      tags:
        - Public API
      summary: Producto específico (público)
      security: []
      parameters:
        - name: tenantSlug
          in: path
          required: true
          schema:
            type: string
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Producto público
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProductResponse'

  /public/{tenantSlug}/orders:
    post:
      tags:
        - Public API
      summary: Crear pedido (checkout público)
      description: Endpoint para el proceso de checkout de la tienda
      security: []
      parameters:
        - name: tenantSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicCreateOrderRequest'
      responses:
        '201':
          description: Pedido creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicOrderResponse'
        '400':
          description: Error en la orden (stock insuficiente, etc.)

# ==========================================
# COMPONENTS
# ==========================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      example: '123e4567-e89b-12d3-a456-426614174000'

    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    CustomerId:
      name: customerId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    CategoryId:
      name: categoryId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    ProductId:
      name: productId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    OrderId:
      name: orderId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    DiscountId:
      name: discountId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Número de página

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Elementos por página

  schemas:
    # ==========================================
    # COMMON SCHEMAS
    # ==========================================
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Validation failed'
        message:
          type: string
          example: "The slug 'mi-tienda-online' already exists"
        statusCode:
          type: integer
          example: 409

    PaginationMeta:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 87
        itemsPerPage:
          type: integer
          example: 20
        hasNextPage:
          type: boolean
          example: true
        hasPreviousPage:
          type: boolean
          example: false

    # ==========================================
    # TENANT SCHEMAS
    # ==========================================
    TenantResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          example: 'Mi Tienda Online'
        slug:
          type: string
          example: 'mi-tienda-online'
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2025-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-15T10:30:00Z'

    # ==========================================
    # USER SCHEMAS
    # ==========================================
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
          example: 'admin@mitienda.com'
        name:
          type: string
          example: 'Juan Pérez'
        role:
          type: string
          enum: [admin, staff]
          example: 'admin'
        isActive:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        emailVerifiedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateUserRequest:
      type: object
      required:
        - email
        - name
        - password
        - role
      properties:
        email:
          type: string
          format: email
          example: 'nuevo@mitienda.com'
        name:
          type: string
          example: 'María García'
        password:
          type: string
          format: password
          minLength: 8
        role:
          type: string
          enum: [admin, staff]
          example: 'staff'

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum: [admin, staff]
        isActive:
          type: boolean

    # ==========================================
    # CATEGORY SCHEMAS
    # ==========================================
    CategoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Electrónicos'
        description:
          type: string
          nullable: true
          example: 'Productos electrónicos y tecnología'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 'Ropa'
        description:
          type: string
          example: 'Prendas de vestir para todas las edades'

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    # ==========================================
    # PRODUCT SCHEMAS
    # ==========================================
    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Camiseta Básica Blanca'
        description:
          type: string
          nullable: true
          example: 'Camiseta de algodón 100% en color blanco'
        price:
          type: number
          format: decimal
          example: 29.99
        stock:
          type: integer
          example: 150
        minStock:
          type: integer
          nullable: true
          example: 10
        sku:
          type: string
          nullable: true
          example: 'CAM-BAS-BL-M'
        imageUrl:
          type: string
          nullable: true
          example: 'https://cdn.mitienda.com/productos/camiseta-blanca.jpg'
        isPublished:
          type: boolean
          example: true
        categoryId:
          type: string
          format: uuid
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryResponse'
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - stock
      properties:
        name:
          type: string
          example: 'Producto Nuevo'
        description:
          type: string
        price:
          type: number
          format: decimal
          example: 49.99
        stock:
          type: integer
          minimum: 0
          example: 50
        minStock:
          type: integer
          minimum: 0
        sku:
          type: string
        imageUrl:
          type: string
        isPublished:
          type: boolean
          default: false
        categoryId:
          type: string
          format: uuid

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        minStock:
          type: integer
        sku:
          type: string
        imageUrl:
          type: string
        categoryId:
          type: string
          format: uuid

    # ==========================================
    # CUSTOMER SCHEMAS
    # ==========================================
    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
          example: 'cliente@email.com'
        name:
          type: string
          example: 'Ana López'
        phone:
          type: string
          nullable: true
          example: '+57 300 123 4567'
        address:
          type: string
          nullable: true
          example: 'Calle 123 #45-67, Bogotá'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CustomerListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateCustomerRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        address:
          type: string

    UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string

    # ==========================================
    # ORDER SCHEMAS
    # ==========================================
    OrderItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/ProductResponse'
        quantity:
          type: integer
          example: 2
        unitPrice:
          type: number
          format: decimal
          example: 29.99
        totalPrice:
          type: number
          format: decimal
          example: 59.98

    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerName:
          type: string
          example: 'Ana López'
        customerEmail:
          type: string
          format: email
          nullable: true
          example: 'ana@email.com'
        status:
          type: string
          enum: [pending, paid, cancelled]
          example: 'pending'
        subtotal:
          type: number
          format: decimal
          example: 59.98
        total:
          type: number
          format: decimal
          example: 53.98
        discountAmount:
          type: number
          format: decimal
          nullable: true
          example: 6.00
        shippingAddress:
          type: string
          nullable: true
          example: 'Calle 123 #45-67, Bogotá'
        notes:
          type: string
          nullable: true
        customerId:
          type: string
          format: uuid
          nullable: true
        discountId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderDetailResponse:
      allOf:
        - $ref: '#/components/schemas/OrderResponse'
        - type: object
          properties:
            orderItems:
              type: array
              items:
                $ref: '#/components/schemas/OrderItemResponse'
            customer:
              $ref: '#/components/schemas/CustomerResponse'
              nullable: true
            discount:
              $ref: '#/components/schemas/DiscountResponse'
              nullable: true

    OrderListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateOrderRequest:
      type: object
      required:
        - customerName
        - items
      properties:
        customerName:
          type: string
          example: 'Cliente Nuevo'
        customerEmail:
          type: string
          format: email
        customerId:
          type: string
          format: uuid
          description: 'ID del cliente existente (opcional)'
        discountCode:
          type: string
          example: '10OFF'
        shippingAddress:
          type: string
        notes:
          type: string
        items:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
                example: 2

    UpdateOrderRequest:
      type: object
      properties:
        customerName:
          type: string
        customerEmail:
          type: string
          format: email
        shippingAddress:
          type: string
        notes:
          type: string

    # ==========================================
    # DISCOUNT SCHEMAS
    # ==========================================
    DiscountResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          example: '10OFF'
        description:
          type: string
          nullable: true
          example: '10% de descuento en toda la tienda'
        type:
          type: string
          enum: [percentage, fixed]
          example: 'percentage'
        value:
          type: number
          format: decimal
          example: 10.00
        active:
          type: boolean
          example: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        usageLimit:
          type: integer
          nullable: true
          example: 100
        usedCount:
          type: integer
          example: 25
        minimumOrderAmount:
          type: number
          format: decimal
          nullable: true
          example: 50.00
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DiscountListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DiscountResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateDiscountRequest:
      type: object
      required:
        - code
        - type
        - value
      properties:
        code:
          type: string
          pattern: '^[A-Z0-9]+$'
          example: 'SAVE20'
        description:
          type: string
        type:
          type: string
          enum: [percentage, fixed]
        value:
          type: number
          format: decimal
          example: 20.00
        active:
          type: boolean
          default: true
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        usageLimit:
          type: integer
        minimumOrderAmount:
          type: number
          format: decimal

    UpdateDiscountRequest:
      type: object
      properties:
        description:
          type: string
        value:
          type: number
          format: decimal
        active:
          type: boolean
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        usageLimit:
          type: integer
        minimumOrderAmount:
          type: number
          format: decimal

    # ==========================================
    # SETTINGS SCHEMAS
    # ==========================================
    SettingsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyName:
          type: string
          example: 'Mi Tienda Online S.A.S.'
        companyLogoUrl:
          type: string
          nullable: true
          example: 'https://cdn.mitienda.com/logo.png'
        currency:
          type: string
          example: 'COP'
        locale:
          type: string
          example: 'es-CO'
        timezone:
          type: string
          example: 'America/Bogota'
        invoicePrefix:
          type: string
          nullable: true
          example: 'INV-'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateSettingsRequest:
      type: object
      properties:
        companyName:
          type: string
        companyLogoUrl:
          type: string
        currency:
          type: string
        locale:
          type: string
        timezone:
          type: string
        invoicePrefix:
          type: string

    # ==========================================
    # ANALYTICS SCHEMAS
    # ==========================================
    DashboardMetricsResponse:
      type: object
      properties:
        period:
          type: string
          example: 'month'
        totalSales:
          type: number
          format: decimal
          example: 25678.50
        totalOrders:
          type: integer
          example: 156
        totalCustomers:
          type: integer
          example: 89
        averageOrderValue:
          type: number
          format: decimal
          example: 164.61
        topProducts:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              productName:
                type: string
                example: 'Camiseta Básica'
              salesCount:
                type: integer
                example: 45
              revenue:
                type: number
                format: decimal
                example: 1349.55
        lowStockProducts:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              productName:
                type: string
                example: 'Producto con Stock Bajo'
              currentStock:
                type: integer
                example: 3
              minStock:
                type: integer
                example: 10

    SalesReportResponse:
      type: object
      properties:
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
        groupBy:
          type: string
          example: 'day'
        totalSales:
          type: number
          format: decimal
          example: 15678.90
        totalOrders:
          type: integer
          example: 89
        chartData:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                example: '2025-01-15'
              sales:
                type: number
                format: decimal
                example: 567.80
              orders:
                type: integer
                example: 4

    # ==========================================
    # LOG SCHEMAS
    # ==========================================
    LogResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
          nullable: true
        user:
          type: object
          nullable: true
          properties:
            name:
              type: string
            email:
              type: string
        action:
          type: string
          example: 'CREATE_PRODUCT'
        resource:
          type: string
          example: 'Product'
        resourceId:
          type: string
          format: uuid
          nullable: true
        metadata:
          type: object
          nullable: true
        ipAddress:
          type: string
          nullable: true
          example: '192.168.1.100'
        userAgent:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    LogListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LogResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    # ==========================================
    # PUBLIC API SCHEMAS
    # ==========================================
    PublicCatalogResponse:
      type: object
      properties:
        tenant:
          type: object
          properties:
            name:
              type: string
              example: 'Mi Tienda Online'
            slug:
              type: string
              example: 'mi-tienda-online'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'
        featuredProducts:
          type: array
          items:
            $ref: '#/components/schemas/PublicProductResponse'

    PublicProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Camiseta Básica Blanca'
        description:
          type: string
          nullable: true
        price:
          type: number
          format: decimal
          example: 29.99
        stock:
          type: integer
          example: 150
        imageUrl:
          type: string
          nullable: true
        categoryId:
          type: string
          format: uuid
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryResponse'
          nullable: true

    PublicProductListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PublicProductResponse'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    PublicCreateOrderRequest:
      type: object
      required:
        - customerName
        - customerEmail
        - items
      properties:
        customerName:
          type: string
          example: 'Cliente Final'
        customerEmail:
          type: string
          format: email
          example: 'cliente@email.com'
        shippingAddress:
          type: string
          example: 'Calle 123 #45-67, Bogotá'
        notes:
          type: string
        discountCode:
          type: string
          example: '10OFF'
        items:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1

    PublicOrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerName:
          type: string
        customerEmail:
          type: string
        status:
          type: string
          enum: [pending]
          example: 'pending'
        subtotal:
          type: number
          format: decimal
        total:
          type: number
          format: decimal
        discountAmount:
          type: number
          format: decimal
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
        createdAt:
          type: string
          format: date-time

tags:
  - name: Tenants
    description: Gestión de tenants (empresas/tiendas)
  - name: Authentication
    description: Autenticación y gestión de sesiones
  - name: Users
    description: Gestión de usuarios administrativos
  - name: Categories
    description: Gestión de categorías de productos
  - name: Products
    description: Gestión de productos del catálogo
  - name: Customers
    description: Gestión de clientes
  - name: Orders
    description: Gestión de pedidos y ventas
  - name: Discounts
    description: Gestión de códigos promocionales
  - name: Settings
    description: Configuración del tenant
  - name: Analytics
    description: Reportes y métricas
  - name: Audit Logs
    description: Logs de auditoría
  - name: Public API
    description: API pública para frontend de tienda
